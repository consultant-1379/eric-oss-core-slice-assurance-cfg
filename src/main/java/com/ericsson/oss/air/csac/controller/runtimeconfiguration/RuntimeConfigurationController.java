/*******************************************************************************
 * COPYRIGHT Ericsson 2023
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.air.csac.controller.runtimeconfiguration;

import static com.ericsson.oss.air.util.RestEndpointUtil.getRows;
import static com.ericsson.oss.air.util.RestEndpointUtil.getStart;

import com.ericsson.oss.air.api.RuntimeConfigurationApi;
import com.ericsson.oss.air.api.model.ProfileDefinitionListDto;
import com.ericsson.oss.air.api.model.RtIndexDefListDto;
import com.ericsson.oss.air.api.model.RtKpiInstanceListDto;
import com.ericsson.oss.air.api.model.RtPmSchemaInfoListDto;
import com.ericsson.oss.air.csac.handler.request.PmSchemasRequestHandler;
import com.ericsson.oss.air.csac.handler.request.ProfileDefRequestHandler;
import com.ericsson.oss.air.csac.handler.request.RuntimeIndexDefRequestHandler;
import com.ericsson.oss.air.csac.handler.request.RuntimeKpiRequestHandler;
import com.ericsson.oss.air.csac.handler.status.ProvisioningTracker;
import com.ericsson.oss.air.csac.model.runtime.ProvisioningState;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

/**
 * Implementation of RuntimeConfigurationApi generated by openapi generator.
 */
@RestController
@Slf4j
public class RuntimeConfigurationController implements RuntimeConfigurationApi {

    private static final String CONFLICT_PROV_STATE_ERROR_MESSAGE = "Unable to successfully compute the runtime configuration. " +
            "Conflict with current provisioning state: ";

    @Autowired
    private ProfileDefRequestHandler profileDefRequestHandler;

    @Autowired
    private RuntimeKpiRequestHandler runtimeKpiRequestHandler;

    @Autowired
    private RuntimeIndexDefRequestHandler runtimeIndexDefRequestHandler;

    @Autowired
    private ProvisioningTracker provisioningTracker;

    @Autowired
    private PmSchemasRequestHandler pmSchemasRequestHandler;

    @Override
    public ResponseEntity<ProfileDefinitionListDto> getProfiles(final Integer start, final Integer rows) {

        final ProfileDefinitionListDto profileDefinitionListDto = this.profileDefRequestHandler.getProfileDefinitions(start, rows);

        return ResponseEntity.ok().body(profileDefinitionListDto);
    }

    @Override
    public ResponseEntity<RtKpiInstanceListDto> getRtKpis(final Integer start, final Integer rows) {

        final RtKpiInstanceListDto runtimeKpiList = this.runtimeKpiRequestHandler.getRuntimeKpiDefinitions(getStart(start, rows), getRows(rows));

        runtimeKpiList.setStart(start);
        runtimeKpiList.setRows(rows);

        return ResponseEntity.ok().body(runtimeKpiList);
    }

    @Override
    public ResponseEntity<RtIndexDefListDto> getRtIndexes() {

        final RtIndexDefListDto rtIndexDefList = this.runtimeIndexDefRequestHandler.getRtIndexDefinitions();

        return ResponseEntity.ok().body(rtIndexDefList);
    }

    @Override
    public ResponseEntity<RtPmSchemaInfoListDto> getRtPmSchemas() {

        final ProvisioningState.State currentProvisioningState = this.provisioningTracker.currentProvisioningState().getProvisioningState();

        log.info("Current provisioning state: {}", currentProvisioningState.name());

        switch (currentProvisioningState) {
            case STARTED -> {
                return ResponseEntity.status(HttpStatus.ACCEPTED).build();
            }
            case ERROR, INTERRUPT -> throw new UnsupportedOperationException(getConflictStateMessage(currentProvisioningState));
            default -> {
                return ResponseEntity.ok(this.pmSchemasRequestHandler.getPmSchemas());
            }
        }
    }

    private String getConflictStateMessage(final ProvisioningState.State state) {
        return CONFLICT_PROV_STATE_ERROR_MESSAGE + state.name();
    }
}
